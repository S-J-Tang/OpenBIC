/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef PLAT_PLDM_SENSOR_H
#define PLAT_PLDM_SENSOR_H

#include "pdr.h"
#include "sensor.h"
#define ADDR_UNKNOWN (0xFF >> 1)

/* Define sensors address(7 bit) */
#define DC_BRICK_1_ADDR (0x28 >> 1)
#define DC_BRICK_1_ADDR_SEC (0x2A >> 1)
#define DC_BRICK_2_ADDR (0x34 >> 1)

#define TOP_INLET_TEMP_ADDR (0x92 >> 1)
#define BOT_INLET_TEMP_ADDR (0x94 >> 1)
#define BOT_OUTLET_TEMP_ADDR (0X96 >> 1)

#define ON_DIE_1_TEMP_TMP432_ADDR (0X98 >> 1)
#define ON_DIE_2_TEMP_TMP432_ADDR (0X98 >> 1)
#define ON_DIE_3_TEMP_TMP432_ADDR (0X9A >> 1)

#define ON_DIE_1_TEMP_EMC1413_ADDR (0XD8 >> 1)
#define ON_DIE_2_TEMP_EMC1413_ADDR (0XD8 >> 1)
#define ON_DIE_3_TEMP_EMC1413_ADDR (0X38 >> 1)

#define MEDHA0_VDD_MP29816a_ADDR (0x50 >> 1)
#define MEDHA0_VDD_RAA228238_ADDR (0xEC >> 1)

#define MEDHA1_VDD_MP29816a_ADDR (0x4C >> 1)
#define MEDHA1_VDD_RAA228238_ADDR (0xE4 >> 1)

#define P075_OWL_VDD_MP2971_ADDR (0xE0 >> 1)
#define P075_OWL_VDD_ISL69260_ADDR (0xC0 >> 1)

#define MAX_S_VDD_MP2971_ADDR (0xE0 >> 1)
#define MAX_S_VDD_ISL69260_ADDR (0xC0 >> 1)

#define VDDQC_HBM1_HBM3_HBM5_HBM7_MP2971_ADDR (0xEA >> 1)
#define VDDQC_HBM1_HBM3_HBM5_HBM7_ISL69260_ADDR (0xE8 >> 1)

#define VDDQL_HBM1_HBM3_HBM5_HBM7_MP2971_ADDR (0xEA >> 1)
#define VDDQL_HBM1_HBM3_HBM5_HBM7_ISL69260_ADDR (0xE8 >> 1)

#define VDDPHY_HBM1_HBM3_HBM5_HBM7_MP2971_ADDR (0xE2 >> 1)
#define VDDPHY_HBM1_HBM3_HBM5_HBM7_ISL69260_ADDR (0xC2 >> 1)

#define MAX_M_VDD_MP2971_ADDR (0xE2 >> 1)
#define MAX_M_VDD_ISL69260_ADDR (0xC2 >> 1)

#define P0V75_TRVDD_MP2971_ADDR (0xE6 >> 1)
#define P0V75_TRVDD_ISL69260_ADDR (0xC4 >> 1)

#define VPP_HBM1_HBM3_HBM5_HBM7_MP2971_ADDR (0xE6 >> 1)
#define VPP_HBM1_HBM3_HBM5_HBM7_ISL69260_ADDR (0xC4 >> 1)

#define HAMSA_VDD_MP2971_ADDR (0xEC >> 1)
#define HAMSA_VDD_ISL69260_ADDR (0xC6 >> 1)

#define MAX_N_VDD_MP2971_ADDR (0xEC >> 1)
#define MAX_N_VDD_ISL69260_ADDR (0xC6 >> 1)

#define VPP_HBM0_HBM2_HBM4_HBM6_MP2971_ADDR (0xE8 >> 1)
#define VPP_HBM0_HBM2_HBM4_HBM6_ISL69260_ADDR (0xC2 >> 1)

#define VDDQL_HBM0_HBM2_HBM4_HBM6_MP2971_ADDR (0xE8 >> 1)
#define VDDQL_HBM0_HBM2_HBM4_HBM6_ISL69260_ADDR (0xC2 >> 1)

#define P0V85_VDDA_PCIE_MP2971_ADDR (0xF2 >> 1)
#define P0V85_VDDA_PCIE_ISL69260_ADDR (0xC6 >> 1)

#define P1V5_VDDHTX_PCIE_MP2971_ADDR (0xF2 >> 1)
#define P1V5_VDDHTX_PCIE_ISL69260_ADDR (0xC6 >> 1)

#define VDDQC_HBM0_HBM2_HBM4_HBM6_MP2971_ADDR (0xEE >> 1)
#define VDDQC_HBM0_HBM2_HBM4_HBM6_ISL69260_ADDR (0xC4 >> 1)

#define P0V9_TRVDD_MP2971_ADDR (0xEE >> 1)
#define P0V9_TRVDD_ISL69260_ADDR (0xC4 >> 1)

#define VDDPHY_HBM0_HBM2_HBM4_HBM6_MP2971_ADDR (0xE4 >> 1)
#define VDDPHY_HBM0_HBM2_HBM4_HBM6_ISL69260_ADDR (0xC0 >> 1)

/* Define the sensor numbers used in this platform */
enum SENSOR_NUM_LIST {
	SENSOR_NUM_UBC_1_TEMP_C = 0x01,
	SENSOR_NUM_UBC_1_P50V_VIN_VOLT_V,
	SENSOR_NUM_UBC_1_P12V_VOUT_VOLT_V,
	SENSOR_NUM_UBC_1_P12V_CURR_A,
	SENSOR_NUM_UBC_1_P12V_PWR_W,
	SENSOR_NUM_UBC_2_TEMP_C,
	SENSOR_NUM_UBC_2_P50V_VIN_VOLT_V,
	SENSOR_NUM_UBC_2_P12V_VOUT_VOLT_V,
	SENSOR_NUM_UBC_2_P12V_CURR_A,
	SENSOR_NUM_UBC_2_P12V_PWR_W,
	SENSOR_NUM_TOP_INLET_TEMP_C,
	SENSOR_NUM_BOT_INLET_TEMP_C,
	SENSOR_NUM_BOT_OUTLET_TEMP_C,
	SENSOR_NUM_ON_DIE_1_TEMP_C,
	SENSOR_NUM_ON_DIE_2_TEMP_C,
	SENSOR_NUM_ON_DIE_3_TEMP_C,
	SENSOR_NUM_MEDHA0_VDD_TEMP_C,
	SENSOR_NUM_MEDHA0_VDD_VOLT_V,
	SENSOR_NUM_MEDHA0_VDD_CURR_A,
	SENSOR_NUM_MEDHA0_VDD_PWR_W,
	SENSOR_NUM_MEDHA1_VDD_TEMP_C,
	SENSOR_NUM_MEDHA1_VDD_VOLT_V,
	SENSOR_NUM_MEDHA1_VDD_CURR_A,
	SENSOR_NUM_MEDHA1_VDD_PWR_W,
	SENSOR_NUM_P075_OWL_VDD_TEMP_C,
	SENSOR_NUM_P075_OWL_VDD_VOLT_V,
	SENSOR_NUM_P075_OWL_VDD_CURR_A,
	SENSOR_NUM_P075_OWL_VDD_PWR_W,
	SENSOR_NUM_MAX_S_VDD_TEMP_C,
	SENSOR_NUM_MAX_S_VDD_VOLT_V,
	SENSOR_NUM_MAX_S_VDD_CURR_A,
	SENSOR_NUM_MAX_S_VDD_PWR_W,
	SENSOR_NUM_VDDQC_HBM1_HBM3_HBM5_HBM7_TEMP_C,
	SENSOR_NUM_VDDQC_HBM1_HBM3_HBM5_HBM7_VOLT_V,
	SENSOR_NUM_VDDQC_HBM1_HBM3_HBM5_HBM7_CURR_A,
	SENSOR_NUM_VDDQC_HBM1_HBM3_HBM5_HBM7_PWR_W,
	SENSOR_NUM_VDDQL_HBM1_HBM3_HBM5_HBM7_TEMP_C,
	SENSOR_NUM_VDDQL_HBM1_HBM3_HBM5_HBM7_VOLT_V,
	SENSOR_NUM_VDDQL_HBM1_HBM3_HBM5_HBM7_CURR_A,
	SENSOR_NUM_VDDQL_HBM1_HBM3_HBM5_HBM7_PWR_W,
	SENSOR_NUM_VDDPHY_HBM1_HBM3_HBM5_HBM7_TEMP_C,
	SENSOR_NUM_VDDPHY_HBM1_HBM3_HBM5_HBM7_VOLT_V,
	SENSOR_NUM_VDDPHY_HBM1_HBM3_HBM5_HBM7_CURR_A,
	SENSOR_NUM_VDDPHY_HBM1_HBM3_HBM5_HBM7_PWR_W,
	SENSOR_NUM_MAX_M_VDD_TEMP_C,
	SENSOR_NUM_MAX_M_VDD_VOLT_V,
	SENSOR_NUM_MAX_M_VDD_CURR_A,
	SENSOR_NUM_MAX_M_VDD_PWR_W,
	SENSOR_NUM_P0V75_TRVDD_TEMP_C,
	SENSOR_NUM_P0V75_TRVDD_VOLT_V,
	SENSOR_NUM_P0V75_TRVDD_CURR_A,
	SENSOR_NUM_P0V75_TRVDD_PWR_W,
	SENSOR_NUM_VPP_HBM1_HBM3_HBM5_HBM7_TEMP_C,
	SENSOR_NUM_VPP_HBM1_HBM3_HBM5_HBM7_VOLT_V,
	SENSOR_NUM_VPP_HBM1_HBM3_HBM5_HBM7_CURR_A,
	SENSOR_NUM_VPP_HBM1_HBM3_HBM5_HBM7_PWR_W,
	SENSOR_NUM_HAMSA_VDD_TEMP_C,
	SENSOR_NUM_HAMSA_VDD_VOLT_V,
	SENSOR_NUM_HAMSA_VDD_CURR_A,
	SENSOR_NUM_HAMSA_VDD_PWR_W,
	SENSOR_NUM_MAX_N_VDD_TEMP_C,
	SENSOR_NUM_MAX_N_VDD_VOLT_V,
	SENSOR_NUM_MAX_N_VDD_CURR_A,
	SENSOR_NUM_MAX_N_VDD_PWR_W,
	SENSOR_NUM_VPP_HBM0_HBM2_HBM4_HBM6_TEMP_C,
	SENSOR_NUM_VPP_HBM0_HBM2_HBM4_HBM6_VOLT_V,
	SENSOR_NUM_VPP_HBM0_HBM2_HBM4_HBM6_CURR_A,
	SENSOR_NUM_VPP_HBM0_HBM2_HBM4_HBM6_PWR_W,
	SENSOR_NUM_VDDQL_HBM0_HBM2_HBM4_HBM6_TEMP_C,
	SENSOR_NUM_VDDQL_HBM0_HBM2_HBM4_HBM6_VOLT_V,
	SENSOR_NUM_VDDQL_HBM0_HBM2_HBM4_HBM6_CURR_A,
	SENSOR_NUM_VDDQL_HBM0_HBM2_HBM4_HBM6_PWR_W,
	SENSOR_NUM_P0V85_VDDA_PCIE_TEMP_C,
	SENSOR_NUM_P0V85_VDDA_PCIE_VOLT_V,
	SENSOR_NUM_P0V85_VDDA_PCIE_CURR_A,
	SENSOR_NUM_P0V85_VDDA_PCIE_PWR_W,
	SENSOR_NUM_P1V5_VDDHTX_PCIE_TEMP_C,
	SENSOR_NUM_P1V5_VDDHTX_PCIE_VOLT_V,
	SENSOR_NUM_P1V5_VDDHTX_PCIE_CURR_A,
	SENSOR_NUM_P1V5_VDDHTX_PCIE_PWR_W,
	SENSOR_NUM_VDDQC_HBM0_HBM2_HBM4_HBM6_TEMP_C,
	SENSOR_NUM_VDDQC_HBM0_HBM2_HBM4_HBM6_VOLT_V,
	SENSOR_NUM_VDDQC_HBM0_HBM2_HBM4_HBM6_CURR_A,
	SENSOR_NUM_VDDQC_HBM0_HBM2_HBM4_HBM6_PWR_W,
	SENSOR_NUM_P0V9_TRVDD_TEMP_C,
	SENSOR_NUM_P0V9_TRVDD_VOLT_V,
	SENSOR_NUM_P0V9_TRVDD_CURR_A,
	SENSOR_NUM_P0V9_TRVDD_PWR_W,
	SENSOR_NUM_VDDPHY_HBM0_HBM2_HBM4_HBM6_TEMP_C,
	SENSOR_NUM_VDDPHY_HBM0_HBM2_HBM4_HBM6_VOLT_V,
	SENSOR_NUM_VDDPHY_HBM0_HBM2_HBM4_HBM6_CURR_A,
	SENSOR_NUM_VDDPHY_HBM0_HBM2_HBM4_HBM6_PWR_W,
};

#define TMP75_TEMP_OFFSET 0x00
#define UPDATE_INTERVAL_1S 1
#define UPDATE_INTERVAL_5S 5
#define UPDATE_INTERVAL_60S 60

enum SENSOR_THREAD_LIST {
	UBC_SENSOR_THREAD_ID = 0,
	VR_SENSOR_THREAD_ID,
	TEMP_SENSOR_THREAD_ID,
	MAX_SENSOR_THREAD_ID,
};

enum GET_VR_DEV_STATUS {
	GET_VR_DEV_SUCCESS = 0,
	GET_VR_DEV_FAILED,
};

int plat_pldm_sensor_get_sensor_count(int thread_id);
sensor_cfg *get_sensor_cfg_by_sensor_id(uint8_t sensor_id);
void plat_pldm_sensor_get_pdr_numeric_sensor(int thread_id, int sensor_num,
					     PDR_numeric_sensor *numeric_sensor_table);
uint8_t plat_pldm_sensor_get_vr_dev(uint8_t *vr_dev);
void plat_pldm_sensor_change_vr_dev();
void plat_pldm_sensor_change_cpu_bus();
void plat_pldm_sensor_change_retimer_dev();
bool is_dc_access(uint8_t sensor_num);
void set_plat_sensor_polling_enable_flag(bool value);
void set_plat_sensor_ubc_polling_enable_flag(bool value);
void set_plat_sensor_temp_polling_enable_flag(bool value);
void set_plat_sensor_vr_polling_enable_flag(bool value);
bool get_plat_sensor_polling_enable_flag();
bool get_plat_sensor_ubc_polling_enable_flag();
bool get_plat_sensor_temp_polling_enable_flag();
bool get_plat_sensor_vr_polling_enable_flag();
bool is_ubc_access(uint8_t sensor_num);
bool is_temp_access(uint8_t cfg_idx);
bool is_vr_access(uint8_t sensor_num);
bool get_sensor_info_by_sensor_id(uint8_t sensor_id, uint8_t *vr_bus, uint8_t *vr_addr,
				  uint8_t *sensor_dev);
size_t char16_strlen(const char16_t *str);
char16_t *char16_strcpy(char16_t *dest, const char16_t *src);
char16_t *char16_strcat_char(char16_t *dest);

#endif
